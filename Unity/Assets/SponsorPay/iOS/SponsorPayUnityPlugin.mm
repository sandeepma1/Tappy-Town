#import "SponsorPayUnityPlugin.h"
#import "SPURLGenerator.h"
#import "SPActionIdValidator.h"
#import "SPCredentials.h"
#import "SPBrandEngageClient+Unity.h"
#import "SPSystemLogger.h"
#import "SPUser.h"
#import "SPUser+Unity.h"
#import "SPCacheManager.h"

#import "UnityAppController.h"

#pragma mark - Plugin wrapper state

static NSString *lastCredentialsToken = nil;
static NSString *callbackGameObjectName = nil;

static BOOL shouldShowRewardNotification;
static BOOL shouldShowVCSNotification;

#pragma mark - Plugin constants

static char const* OFW_RESULT_UNITY_CALLBACK_METHOD_NAME = "OnSPOfferWallResultFromSDK";
static char const* VCS_UNITY_CALLBACK_METHOD_NAME = "OnSPCurrencyDeltaOfCoinsMessageFromSDK";
static char const* MBE_RESULT_UNITY_CALLBACK_METHOD_NAME = "OnSPBrandEngageResultFromSDK";
static char const* MBE_STATUS_UNITY_CALLBACK_METHOD_NAME = "OnSPBrandEngageStatusMessageFromSDK";
static char const* INTERSTITIAL_RESULT_UNITY_CALLBACK_METHOD_NAME = "OnSPInterstitialResultFromSDK";
static char const* INTERSTITIAL_STATUS_UNITY_CALLBACK_METHOD_NAME = "OnSPInterstitialMessageFromSDK";
static char const* NATIVE_EXCEPTION_CALLBACK_METHOD_NAME = "OnExceptionFromSDK";

#pragma mark - Private functions

inline UnityAppController* SPGetAppController() {
    return (UnityAppController*)[UIApplication sharedApplication].delegate;
}

/**
 * Forces the orientation of the device, when possible (Unity version 4.5)
 */
void SPUpdateOrientation() {
    if (UNITY_VERSION >= 460) {
        return;
    }

    UnityAppController *appController = SPGetAppController();
    if ([appController respondsToSelector:@selector(updateOrientationFromController:)]) {
        [appController performSelectorOnMainThread:@selector(updateOrientationFromController:) withObject:appController.rootViewController waitUntilDone:YES];
    }
}

#pragma mark - Plugin parameters provider

@implementation SPUnityPluginParametersProvider {
    NSDictionary *_pluginParameters;
}

@synthesize pluginVersion = _pluginVersion;

- (NSDictionary *)dictionaryWithKeyValueParameters
{
    return [NSDictionary dictionaryWithDictionary:self.pluginParameters];
}

-(NSDictionary *)pluginParameters
{
    if (!_pluginParameters){
        if (!self.pluginVersion){
            self.pluginVersion = @"";
        }
        
        _pluginParameters = [[NSDictionary alloc]initWithObjectsAndKeys:
                             @"unity", @"framework",
                             self.pluginVersion, @"plugin_version",
                             nil];
    }
    return _pluginParameters;
}

- (void)dealloc
{
    self.pluginVersion = nil;
}

@end


#pragma mark - String convenience functions

NSString *asNSString(const char *cString)
{
    if( cString == NULL) {
        return @"";
    }
    NSString *s = [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
    return s ? s : @"";
}

char* cStringCopy(const char* string)
{
    if (string == NULL)
        return NULL;

    char* res = (char*)malloc(strlen(string) + 1);
    strcpy(res, string);

    return res;
}

#pragma mark - Callbacks

void _SPSetCallbackGameObjectName(const char* name)
{
    @autoreleasepool {
        callbackGameObjectName = asNSString(name);
    }
}

void sendMessageToUnitySide(const char *methodName, const char *message)
{
    if (callbackGameObjectName) {
        UnitySendMessage([callbackGameObjectName UTF8String], methodName, message);
    } else {
        NSLog(@"SponsorPayPlugin error! The callback game object name was not specified.");
    }
}

void sendDictionaryToUnity(const char *methodName, NSDictionary* dict)
{
    NSError *error = nil;
    //convert object to data
    NSData* jsonData = [NSJSONSerialization dataWithJSONObject:dict
                                                       options:NSJSONWritingPrettyPrinted
                                                         error:&error];

    NSString* json = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];

    sendMessageToUnitySide(methodName, json.UTF8String);

    error = nil;
    json = nil;
}



#pragma mark - Start SDK

const char* _SPStartSDK(const char* appId, const char* userId, const char*securityToken)
{
    @autoreleasepool {
        NSString* nsUserId = asNSString(userId);
        if(![nsUserId isEqualToString:@""])
        {
            lastCredentialsToken = [SponsorPaySDK startForAppId:asNSString(appId)
                                                         userId:nsUserId
                                                  securityToken:asNSString(securityToken)];
        }
        else
        {
            lastCredentialsToken = [SponsorPaySDK startWithAutogeneratedUserForAppId:asNSString(appId)
                                                                       securityToken:asNSString(securityToken)];
        }
    }
    return cStringCopy([lastCredentialsToken UTF8String]);
}

void setCurrencyName(const char* currencyName)
{
    [SponsorPaySDK setCurrencyName:asNSString(currencyName) forCredentials:lastCredentialsToken];
}


void checkCredentialsAndInvokeWithCurrency(const char* credentialsToken, const char* currency, void (^block)(NSString *token))
{
    NSString *credToken = asNSString(credentialsToken);
    if ([credToken isEqualToString:@""]) {
        if ( lastCredentialsToken == nil) {
            sendMessageToUnitySide(NATIVE_EXCEPTION_CALLBACK_METHOD_NAME,
                                   [@"The SDK was not started yet.\nYou have to execute SponsorPay.start\nmethod first" UTF8String]);
            return;
        }
        credToken = lastCredentialsToken;
    } else {
        if(![SponsorPaySDK isCredentialsTokenValid:credToken]) {
            sendMessageToUnitySide(NATIVE_EXCEPTION_CALLBACK_METHOD_NAME,
                                   [@"The provided token is not valid. Please execute SponsorPay.start" UTF8String]);
            return;
        }
    }
    if (currency) {
        setCurrencyName(currency);
    }
    dispatch_async(dispatch_get_main_queue(), ^{block(credToken);});
}

void checkCredentialsAndInvoke(const char* credentialsToken, void (^block)(NSString *token))
{
    checkCredentialsAndInvokeWithCurrency(credentialsToken, nil, block);
}

#pragma mark - OfferWall

@implementation SPUnityOfferWallDelegate

- (void)offerWallViewController:(SPOfferWallViewController *)offerWallVC
           isFinishedWithStatus:(int)status
{
    dispatch_async(dispatch_get_main_queue(), ^{
        self.offerWallVC = nil;
    });

    SPUpdateOrientation();
    UnityPause(false);

    sendMessageToUnitySide(OFW_RESULT_UNITY_CALLBACK_METHOD_NAME,
                           [[NSString stringWithFormat:@"%i", status] UTF8String]);
}

+ (SPUnityOfferWallDelegate *)instance
{
    static SPUnityOfferWallDelegate *instance = nil;
    if (!instance){
        instance = [[SPUnityOfferWallDelegate alloc] init];
    }
    return instance;
}

@end

void _SPLaunchOfferWall(const char* credentialsToken, const char* currencyName, const char* placementId)
{
    @autoreleasepool {
        NSString *nsPlacementId = asNSString(placementId);
        
        checkCredentialsAndInvokeWithCurrency(credentialsToken, currencyName, ^(NSString* token){
            SPOfferWallViewController *ofw = [SponsorPaySDK offerWallViewControllerForCredentials:token];
            ofw.shouldFinishOnRedirect = YES;
            UIViewController *vc = [[[UIApplication sharedApplication] keyWindow] rootViewController];
            SPUnityOfferWallDelegate *delegate = [SPUnityOfferWallDelegate instance];
            delegate.offerWallVC = ofw;
            ofw.delegate = delegate;
            UnityPause(true);
            [ofw showOfferWallWithParentViewController:vc placementId:nsPlacementId];
        });
    }
}

#pragma mark - VCS

@implementation SPUnityVCSDelegate

- (void)virtualCurrencyConnector:(SPVirtualCurrencyServerConnector *)connector
  didReceiveDeltaOfCoinsResponse:(double)deltaOfCoins
                      currencyId:(NSString *)currencyId
                    currencyName:(NSString *)currencyName
             latestTransactionId:(NSString *)transactionId

{
    //build an info object and convert to json
    
    NSDictionary* transaction = @{@"DeltaOfCoins": @(deltaOfCoins),
                                  @"LatestTransactionId": transactionId,
                                  @"CurrencyId": currencyId,
                                  @"CurrencyName": currencyName};
    
    NSDictionary* info = @{@"success": @YES,
                           @"transaction": transaction};

    sendDictionaryToUnity(VCS_UNITY_CALLBACK_METHOD_NAME, info);
}

- (void)virtualCurrencyConnector:(SPVirtualCurrencyServerConnector *)connector
                 failedWithError:(SPVirtualCurrencyRequestErrorType)errorType
                       errorCode:(NSString *)errorCode
                    errorMessage:(NSString *)errorMessage
{
    NSDictionary* jsonError = [NSDictionary dictionaryWithObjectsAndKeys:
                               [self getErrorTypeString:errorType], @"Type",
                               errorCode, @"Code",
                               errorMessage, @"Message", nil];
    
    
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:NO], @"success",
                          jsonError,  @"error", nil];
    
    sendDictionaryToUnity(VCS_UNITY_CALLBACK_METHOD_NAME, info);
}

- (NSString*) getErrorTypeString:(SPVirtualCurrencyRequestErrorType)errorType
{
    NSString* errorTypeString;
    switch (errorType) {
        case NO_ERROR:
            errorTypeString = @"NO_ERROR";
            break;
        case ERROR_NO_INTERNET_CONNECTION:
            errorTypeString = @"ERROR_NO_INTERNET_CONNECTION";
            break;
        case ERROR_INVALID_RESPONSE:
            errorTypeString = @"ERROR_INVALID_RESPONSE";
            break;
        case ERROR_INVALID_RESPONSE_SIGNATURE:
            errorTypeString = @"ERROR_INVALID_RESPONSE_SIGNATURE";
            break;
        case SERVER_RETURNED_ERROR:
            errorTypeString = @"SERVER_RETURNED_ERROR";
            break;
        case ERROR_OTHER:
            errorTypeString = @"ERROR_OTHER";
            break;
        default:
            break;
    }
    return errorTypeString;
}

+ (SPUnityVCSDelegate *)instance
{
    static SPUnityVCSDelegate *instance = nil;

    if (!instance){
        instance = [[SPUnityVCSDelegate alloc] init];
    }

    return instance;
}

@end

#pragma mark - User segmentation


const char* _SPUser(const char* json)
{
    @autoreleasepool {
        const char* userDataCString;
        SPUser *user = [[SponsorPaySDK instance] user];
        NSString *jsonString = asNSString(json);

        NSData *jsonData = [jsonString dataUsingEncoding:NSUTF8StringEncoding];
        id json = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:nil];

        // Check that the json is a dictionary
        NSString *userData;
        if (![json isKindOfClass:[NSDictionary class]]) {
            NSString *errorMessage = [NSString stringWithFormat:@"Json provided is not a dictionary"];
            NSDictionary *responseDict = @{SPUserKeyParam: @"", SPUserErrorParam: errorMessage, SPUserSuccessParam: @NO};
            NSData *data = [NSJSONSerialization dataWithJSONObject:responseDict options:0 error:nil];
            userData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];

        // Check for put action
        } else if ([json[SPUserActionParam] isEqualToString:SPUserPutAction]) {
            userData = [user setDataWithKey:json[SPUserKeyParam] value:json[SPUserValueParam]];

        // Check for get action
        } else if ([json[SPUserActionParam] isEqualToString:SPUserGetAction]) {
            userData = [user dataWithKey:json[SPUserKeyParam]];

        // Handles non-supported command
        } else {
            NSString *errorMessage = [NSString stringWithFormat:@"Command %@ not supported", json[SPUserActionParam]];
            NSDictionary *responseDict = @{SPUserKeyParam: json[SPUserKeyParam], SPUserErrorParam: errorMessage, SPUserSuccessParam: @NO};
            NSData *data = [NSJSONSerialization dataWithJSONObject:responseDict options:0 error:nil];
            userData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
        }

        userDataCString = [userData UTF8String];
        return cStringCopy(userDataCString);
    }
}

void _SPUserReset()
{
    SPUser *user = [[SponsorPaySDK instance] user];
    [user reset];
}

void _SPSetShouldShowNotificationOnVCSCoins(int should)
{
    shouldShowVCSNotification = (BOOL) should;
}

void _SPSendDeltaOfCoinsRequest(const char* credentialsToken, const char* currencyId)
{
    @autoreleasepool {
        NSString *nsCurrencyId = asNSString(currencyId);
        checkCredentialsAndInvoke(credentialsToken, ^(NSString* token){
            [SponsorPaySDK setShowPayoffNotificationOnVirtualCoinsReceived:shouldShowVCSNotification
                                                            forCredentials:token];
            SPVirtualCurrencyServerConnector *vcs = [SponsorPaySDK VCSConnectorForCredentials:token];
            vcs.delegate = [SPUnityVCSDelegate instance];
            [vcs fetchDeltaOfCoinsWithCurrencyId:nsCurrencyId];
        });
    }
}


#pragma mark - Brand Engage

@implementation SPUnityMBEDelegate

-(id)init
{
    self = [super init];
    if (self)
    {
        _queryingOfferSet = [[NSMutableSet alloc] init];
    }
    return self;
}

- (void)brandEngageClient:(SPBrandEngageClient *)brandEngageClient
         didReceiveOffers:(BOOL)areOffersAvailable
{
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:YES], @"success",
                          [NSNumber numberWithBool:areOffersAvailable],  @"offersAvailable", nil];
    
    
    NSString *token = brandEngageClient.credentials.credentialsToken;
    [self.queryingOfferSet removeObject:token];
    
    sendDictionaryToUnity(MBE_STATUS_UNITY_CALLBACK_METHOD_NAME, info);
}

- (void)brandEngageClient:(SPBrandEngageClient *)brandEngageClient
          didChangeStatus:(SPBrandEngageClientStatus)newStatus
{
    NSString *token = brandEngageClient.credentials.credentialsToken;
    if (newStatus == ERROR && [self.queryingOfferSet containsObject:token]){
        NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                              [NSNumber numberWithBool:NO], @"success",
                              @"",  @"error", nil];
        [self.queryingOfferSet removeObject:token];
        
        sendDictionaryToUnity(MBE_STATUS_UNITY_CALLBACK_METHOD_NAME, info);
        return;
    }
    
    if (newStatus != STARTED){
        sendMessageToUnitySide(MBE_RESULT_UNITY_CALLBACK_METHOD_NAME, [[self getMBEStatusString:newStatus] UTF8String]);
    }
}

- (void)brandEngageClientWillDismissEngagement:(SPBrandEngageClient *)brandEngage
{
    SPUpdateOrientation();
    UnityPause(false);
}

- (NSString*)getMBEStatusString:(SPBrandEngageClientStatus)status
{
    NSString* statusString;
    switch (status) {
        case ERROR:
            statusString = @"ERROR";
            break;
        case CLOSE_FINISHED:
            statusString = @"CLOSE_FINISHED";
            break;
        case CLOSE_ABORTED:
        default:
            statusString = @"CLOSE_ABORTED";
            break;
    }
    return statusString;
}

+ (SPUnityMBEDelegate *)instance
{
    static SPUnityMBEDelegate *instance = nil;
    
    if (!instance) {
        instance = [[SPUnityMBEDelegate alloc] init];
    }
    
    return instance;
}

@end

void _SPRequestBrandEngageOffers(const char* credentialsToken, const char* currencyName, int queryVCS, const char* currencyId, const char* placementId)
{
    @autoreleasepool {
        NSString *nsPlacementId = asNSString(placementId);
        NSString *nsCurrenctyId = asNSString(currencyId);
        
        checkCredentialsAndInvokeWithCurrency(credentialsToken, currencyName, ^(NSString* token){
            SPBrandEngageClient *mbe = [SponsorPaySDK brandEngageClientForCredentials:token];
            SPUnityMBEDelegate *delegate = [SPUnityMBEDelegate instance];
            [delegate.queryingOfferSet addObject:token];
            delegate.mbeToken = token;
            delegate.currencyId = nsCurrenctyId;
            mbe.delegate = delegate;
            
            
            [mbe requestOffersForPlacementId:nsPlacementId
                      queryVCSWithCurrencyId:nsCurrenctyId
                                 vcsDelegate:queryVCS ? [SPUnityVCSDelegate instance] : nil];
        });
    }
}

void _SPStartBrandEngage()
{
    @autoreleasepool {
        checkCredentialsAndInvoke([[SPUnityMBEDelegate instance].mbeToken UTF8String], ^void(NSString *token){
            SPBrandEngageClient *mbe = [SponsorPaySDK brandEngageClientForCredentials:token];
            if (!mbe.canStartOffers)
            {
                sendMessageToUnitySide(NATIVE_EXCEPTION_CALLBACK_METHOD_NAME,
                                       [@"You must request offer first." UTF8String]);
                return;
            }
            mbe.shouldShowRewardNotificationOnEngagementCompleted = shouldShowRewardNotification;
            UIViewController *vc = [[[UIApplication sharedApplication] keyWindow] rootViewController];
            UnityPause(true);
            [mbe startWithParentViewController:vc];
        });
    }
}

void _SPSetShouldShowBrandEngageRewardNotification(int should)
{
    shouldShowRewardNotification = (BOOL) should;
}

#pragma mark - Interstitials

@implementation SPUnityInterstitialDelegate

- (void)interstitialClient:(SPInterstitialClient *)client canShowInterstitial:(BOOL)canShowInterstitial
{
    //fire notification offers available
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:YES], @"success",
                          [NSNumber numberWithBool:canShowInterstitial],  @"adsAvailable", nil];
    
    self.canShowInterstitial = canShowInterstitial;

    sendDictionaryToUnity(INTERSTITIAL_STATUS_UNITY_CALLBACK_METHOD_NAME, info);
}

- (void)interstitialClient:(SPInterstitialClient *)client didDismissInterstitialWithReason:(SPInterstitialDismissReason)dismissReason
{
    //fire notification with dissmiss reason
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:YES], @"success",
                          [self getInterstitialDismissReason:dismissReason],  @"closeReason", nil];

    SPUpdateOrientation();
    UnityPause(false);

    [SPUnityInterstitialDelegate instance].canShowInterstitial = NO;
    sendDictionaryToUnity(INTERSTITIAL_RESULT_UNITY_CALLBACK_METHOD_NAME, info);
}

- (void)interstitialClient:(SPInterstitialClient *)client didFailWithError:(NSError *)error
{
    //fire notification with dissmiss reason
    NSDictionary* info = [NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithBool:NO], @"success",
                          [error localizedDescription],  @"error", nil];

    SPUpdateOrientation();
    UnityPause(false);
    [SPUnityInterstitialDelegate instance].canShowInterstitial = NO;
    sendDictionaryToUnity(INTERSTITIAL_RESULT_UNITY_CALLBACK_METHOD_NAME, info);
}

- (void)interstitialClientDidShowInterstitial:(SPInterstitialClient *)client
{
    // do nothing
}


- (NSString*) getInterstitialDismissReason:(SPInterstitialDismissReason)reason
{
    NSString* reasonString;
    switch (reason) {
        case SPInterstitialDismissReasonUnknown:
            reasonString = @"ReasonUnknown";
            break;
        case SPInterstitialDismissReasonUserClickedOnAd:
            reasonString = @"ReasonUserClickedOnAd";
            break;
        case SPInterstitialDismissReasonUserClosedAd:
        default:
            reasonString = @"ReasonUserClosedAd";
            break;
    }
    return reasonString;
}

+ (SPUnityInterstitialDelegate *)instance
{
    static SPUnityInterstitialDelegate *instance = nil;

    if (!instance) {
        instance = [[SPUnityInterstitialDelegate alloc] init];
	}

    return instance;
}

@end

void _SPRequestIntersitialAds(const char* credentialsToken, const char* placementId)
{
    @autoreleasepool {
        NSString *nsPlacementId = asNSString(placementId);
        
        checkCredentialsAndInvoke(credentialsToken, ^(NSString* token){
            SPInterstitialClient *interstitialClient = [SponsorPaySDK interstitialClient];
            [SPUnityInterstitialDelegate instance].canShowInterstitial = NO;
            interstitialClient.delegate = [SPUnityInterstitialDelegate instance];
            [interstitialClient checkInterstitialAvailableForPlacementId:nsPlacementId];
        });
    }
}

void _SPShowInterstitialAd()
{
    @autoreleasepool {
        checkCredentialsAndInvoke(nil, ^(NSString* token){
            SPInterstitialClient *interstitialClient = [SponsorPaySDK interstitialClient];
            if (![SPUnityInterstitialDelegate instance].canShowInterstitial)
            {
                sendMessageToUnitySide(NATIVE_EXCEPTION_CALLBACK_METHOD_NAME,
                                       [@"You must request an interstitial first" UTF8String]);
                return;
            }
            UIViewController *vc = [[[UIApplication sharedApplication] keyWindow] rootViewController];

            UnityPause(true);
            [interstitialClient showInterstitialFromViewController:vc];
        });
    }
}

#pragma mark - Rewarded Actions

void _SPReportActionCompletion(const char* credentialsToken, const char* name)
{
    @autoreleasepool {
        NSString* actionId = asNSString(name);
        checkCredentialsAndInvoke(credentialsToken, ^(NSString* token){
            NSString *exceptionReason = nil;
            if (![SPActionIdValidator validate:actionId
                              reasonForInvalid:&exceptionReason]){
                sendMessageToUnitySide(NATIVE_EXCEPTION_CALLBACK_METHOD_NAME,
                                       [exceptionReason UTF8String]);
                exceptionReason = nil;
                return;
            }
            [SponsorPaySDK reportActionCompleted:actionId
                                  forCredentials:token];
        });
    }
}

#pragma mark - Pause downloads for video cache

void _SPVideoDownloadPause(bool pause)
{
    if (pause) {
        [[SponsorPaySDK cacheManager] pauseDownloads];
    } else {
        [[SponsorPaySDK cacheManager] resumeDownloads];
    }
}
#pragma mark - Logging

void _SPEnableLogging(int should)
{
    if (should) {
        [SPLogger addLogger:[SPSystemLogger logger]];
    }
}

void _SPSetLogLevel(SPLogLevel logLevel) {
        [SponsorPaySDK setLoggingLevel:logLevel];
}

#pragma mark - Plugin parameters provider

@implementation SPAdditionalParametersProvider

static SPAdditionalParametersProvider *instance = nil;

- (NSDictionary *)dictionaryWithKeyValueParameters
{
    return [NSDictionary dictionaryWithDictionary:self.additionalParameters];
}


-(void)addParameters:(NSString*)json
{
    NSError *error;
    NSData *data = [json dataUsingEncoding:NSUTF8StringEncoding];
    NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data
                                                         options:kNilOptions
                                                           error:&error];
    if(!error) {
        self.additionalParameters = [NSDictionary  dictionaryWithDictionary:dict];
    }

}

-(void) clearParameters
{
    self.additionalParameters = nil;
}

+ (SPAdditionalParametersProvider *)instance
{
    if (!instance){
        instance = [[SPAdditionalParametersProvider alloc] init];
        [SPURLGenerator setGlobalCustomParametersProvider:instance];
    }
    return instance;
}


@end

void _SPAddParameters(const char* json)
{
    @autoreleasepool {
        NSString* nsJSON = asNSString(json);
        if(![nsJSON isEqualToString:@""])
        {
            [[SPAdditionalParametersProvider instance]addParameters:nsJSON];
        }
    }
}

void _SPClearParameters()
{
    [[SPAdditionalParametersProvider instance] clearParameters];
}

#pragma mark -

void _SPSetPluginVersion(const char* pluginVersion)
{
    @autoreleasepool {
        SPUnityPluginParametersProvider *p =
		[[SPUnityPluginParametersProvider alloc] init];
        p.pluginVersion = asNSString(pluginVersion);
        [SPURLGenerator setGlobalCustomParametersProvider:p];
    }
}



